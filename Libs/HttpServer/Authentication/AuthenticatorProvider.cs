using System;
using System.Collections.Generic;
using HttpServer.Headers;

namespace HttpServer.Authentication
{
    /// <summary>
    /// Provides authentication in the web server.
    /// </summary>
    internal class AuthenticatorProvider
    {
        private readonly Dictionary<string, IAuthenticator> _authenticators = new Dictionary<string, IAuthenticator>();

        /// <summary>
        /// Add a authenticator.
        /// </summary>
        /// <param name="authenticator"></param>
        public void Add(IAuthenticator authenticator)
        {
            _authenticators.Add(authenticator.Scheme, authenticator);
        }

        /// <summary>
        /// Authenticate request.
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        /// <remarks>
        /// Requires that a <c>AuthorizationHeader</c> have been sent by the client. If not,
        /// request one by sending a WWW-Authentication header (can be generated by the Challenge method).
        /// </remarks>
        /// <exception cref="InvalidOperationException">Authorization header was not found in the request.</exception>
        /// <exception cref="NotSupportedException">Requested authentication scheme is not supported.</exception>
        public bool Authenticate(IRequest request, object[] options)
        {
            var authHeader = request.Headers[AuthorizationHeader.NAME] as AuthorizationHeader;
            if (authHeader == null)
                throw new InvalidOperationException(AuthorizationHeader.NAME + " header was not found in the request.");

            IAuthenticator authenticator;
            if (!_authenticators.TryGetValue(authHeader.Scheme, out authenticator))
                throw new NotSupportedException(authHeader.Scheme + " is not supported (no authenticator was found).");

            return authenticator.Authenticate(authHeader, request.Uri.Host, request.Method.ToString().ToLower(), options);
        }

        /// <summary>
        /// Challenge
        /// </summary>
        /// <param name="scheme">Authorization scheme to use</param>
        /// <param name="realm">Realm that the user should authenticate in</param>
        /// <param name="options">Implementation specific options used to control authentication behavior.</param>
        /// <returns>WWW-Authenticate header.</returns>
        /// <remarks>
        /// <para>
        /// Scheme can currently be <c>basic</c> or <c>digest</c>. Basic is not very safe, but easier to use.
        /// Digest is quite safe.
        /// </para><para>
        /// Read information for each <see cref="IAuthenticator"/> to see what the <paramref name="options"/> can be.
        /// </para>
        /// </remarks>
        /// <exception cref="NotSupportedException">Requested scheme is not supported.</exception>
        public IHeader CreateChallenge(string scheme, string realm, object[] options)
        {
            IAuthenticator authenticator;
            if (!_authenticators.TryGetValue(scheme, out authenticator))
                throw new NotSupportedException(scheme + " is not supported (no authenticator was found).");

            return authenticator.CreateChallenge(realm, options);
        }
    }
}